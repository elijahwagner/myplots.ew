library(mypackage)
library(mypackage)
devtools::install(build_vignetts=TRUE)
library(devtools)
library(usethis)
create_package(C:/Users/elisw/Downloads/SUU/Math_3190/myplots.ew/ghist_package.R)
create_package(C:\Users\elisw\Downloads\SUU\Math_3190\myplots.ew\ghist_package.R)
setwd("C:/Users/elisw/Downloads/SUU/Math_3190/myplots.ew")
create_package()
create_package(C:\Users\elisw\Downloads\SUU\Math_3190\myplots.ew)
create_package(ghist_package)
create_package("ghist_package")
create_package("ghist")
create_package(gbox)
create_package("gbox")
library(devtools)
build("ghist.R")
#' Create a quick histogram plot in ggplot.
#'
#' This function creates a histogram plot using ggplot for a given vector.
#'
#' @param x A numeric vector to be plotted.
#' @param color The color of the bars in the histogram.
#' @param fill The fill color of the bars in the histogram.
#' @param alpha The transparency of the bars in the histogram.
#' @param binwidth The width of the bins in the histogram.
#' @param title The title of the plot.
#' @param xlab The label for the x-axis.
#' @param ylab The label for the y-axis.
#' @return A ggplot object representing the histogram plot.
#' @examples
#' # Create a histogram plot of a random numeric vector
#' x <- rnorm(100)
#' ghist(x)
ghist <- function(x, color = "black", fill = "skyblue", alpha = 0.5,
binwidth = NULL, title = NULL, xlab = "Value", ylab = "Frequency") {
require(ggplot2)
# Create histogram plot
p <- ggplot(data.frame(x), aes(x)) +
geom_histogram(color = color, fill = fill, alpha = alpha, binwidth = binwidth) +
labs(title = title, x = xlab, y = ylab)
return(p)
}
build("ghist")
check("ghist")
install(ghist)
install("ghist")
library("ghist")
x <- rnorm(100)
ghist(x)
library(ggplot)
library(ggplot2)
> x <- rnorm(100)
library(ggplot2)
x <- rnorm(100)
x <- rnorm(100)
ghist(x)
setwd("C:/Users/elisw/Downloads/SUU/Math_3190/myplots.ew")
create_package("gbox")
#' Create a box plot with optional grouping
#'
#' This function creates a box plot from a single numeric vector or
#' from a combination of one numeric and one categorical vector.
#'
#' @param x A numeric vector or a data frame with one numeric and one categorical variable.
#' @param y (Optional) A numeric vector if x is a data frame.
#' @param horizontal Logical. Should the box plot be horizontal? Default is FALSE.
#' @param ... Additional arguments passed to geom_boxplot().
#' @return A ggplot box plot object.
#' @examples
#' # Create a box plot from a numeric vector
#' gboxplot(mtcars$mpg)
#' # Create a side-by-side box plot from a numeric and a categorical vector
#' gboxplot(mtcars, cyl)
#' @export
gboxplot <- function(x, y = NULL, horizontal = FALSE, ...) {
if (is.data.frame(x)) {
if (is.null(y)) {
stop("Please provide a second argument for categorical variable.")
}
if (horizontal) {
ggplot(x, aes(x = factor(y), y = x[[1]])) +
geom_boxplot() +
coord_flip() +
labs(x = "", y = deparse(substitute(x))) +
theme_minimal() +
theme(legend.position = "none")
} else {
ggplot(x, aes(x = factor(y), y = x[[1]])) +
geom_boxplot() +
labs(x = deparse(substitute(y)), y = deparse(substitute(x))) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
} else {
ggplot() +
geom_boxplot(aes(y = x), horizontal = horizontal) +
labs(y = deparse(substitute(x))) +
theme_minimal()
}
}
build(gbox)
build("gbox")
install("gbox")
library("gbox")
data("mtcars")
# Create a horizontal box plot from a numeric vector
gboxplot(mtcars$mpg, horizontal = TRUE)
# Create a side-by-side box plot from a numeric and a categorical vector
gboxplot(mtcars, cyl)
# Create a side-by-side box plot from a numeric and a categorical vector
gboxplot(mtcars, "cyl")
# Create a horizontal box plot from a numeric vector
gboxplot(mtcars$mpg, horizontal = TRUE)
